using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Home.Core;
using Home.Core.Interfaces;
using Home.Core.Models;

namespace {{ Namespace }} {

    partial class {{ Classname }} {

        public {{ if Classname != "AbstractDevice" }}new{{ end }} void Update(IDevice device) {
            var other = device as {{ Classname }};
            if (other is null) throw new Exception("Type mismatch!");
            if (DeviceId != other.DeviceId) throw new Exception("ID mismatch!");
            {{ if Classname != "AbstractDevice" }}base.Update(device);{{ end }}
            {{~ for property in Device.Properties ~}}
            if ({{ property.FieldName }} != other.{{ property.FieldName }}) {
                {{ property.FieldName }} = other.{{ property.FieldName }};
                NotifyObservers(nameof({{ property.FieldName }}), {{ property.FieldName }});
            }
            {{~ end ~}}
        }

        private bool Equals({{ Classname }} other) {
            return base.Equals(other){{if Device.Properties | array.size > 0}} &&{{ end }}
            {{~ for property in Device.Properties ~}}
                {{ property.FieldName }} == other.{{ property.FieldName }}
                {{- if !for.last }} &&{{ end }}
            {{~ end ~}}
            ;
        }

        public override bool Equals(object obj) {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals(({{ Classname }})obj);
        }

        public override int GetHashCode() {
            return HashCode.Combine(DeviceId);
        }

        public {{ if Classname != "AbstractDevice" }}new{{ end }} async Task InvokeCommand(string command, Dictionary<string, object> args) {
            {{~ if Device.Commands | array.size > 0 ~}}
            switch(command) {
                {{~ for command in Device.Commands ~}}
                case "{{ command.Name }}":
                    await {{ command.Method }}(
                        {{~ for arg in command.Arguments ~}}
                        Helpers.ConvertType<{{ arg.Type }}>(args["{{ arg.Name }}"])
                        {{- if !for.last }},{{ end }}
                        {{~ end ~}}
                    );
                    break;
                {{~ end ~}}
            }
            {{~ else ~}}
            await Task.FromResult(true);
            {{~ end ~}}
        }

    }

}